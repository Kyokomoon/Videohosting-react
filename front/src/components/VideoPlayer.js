import React, { useEffect, useState, useRef } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import ChatMessage from "./ChatMessage";
import "../VideoPlayer.css";
// –°–ø–∏—Å–æ–∫ —Å–º–∞–π–ª–∏–∫–æ–≤
const emojis = ["üòÄ", "üòÇ", "üòç", "üòé", "üëç", "‚ù§Ô∏è", "üî•", "üéâ", "ü§î", "üëè"];

const VideoPlayer = () => {
  const { id } = useParams();
  const [video, setVideo] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const chatEndRef = useRef(null);
  const [showEmojis, setShowEmojis] = useState(false);
  const textareaRef = useRef(null);
  const authorResponses = [
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!",
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ!",
    "–Ø —É—á—Ç—É —ç—Ç–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∏–¥–µ–æ",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä!",
    "–í—ã –ø—Ä–∞–≤—ã, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ",
    "–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ!",
    "–ü—Ä–∏—è—Ç–Ω–æ —Å–ª—ã—à–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
    "–†–∞–¥, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!",
    "–ë—É–¥—É —Ä–∞–¥ –Ω–æ–≤—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º"
  ];
  const insertEmoji = (emoji) => {
    const textarea = textareaRef.current;
    const startPos = textarea.selectionStart;
    const endPos = textarea.selectionEnd;
    const currentText = newMessage;
    
    setNewMessage(
      currentText.substring(0, startPos) + 
      emoji + 
      currentText.substring(endPos)
    );
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ textarea –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
    setTimeout(() => {
      textarea.focus();
      textarea.selectionStart = startPos + emoji.length;
      textarea.selectionEnd = startPos + emoji.length;
    }, 0);
  };
  useEffect(() => {
    const fetchVideo = async () => {
      try {
        const response = await axios.get(
          `http://localhost:8000/api/videos/${id}/`
        );
        setVideo(response.data);
      } catch (error) {
        console.error("Failed to fetch video", error);
      }
    };

    fetchVideo();

    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
    const demoMessages = [
      { author: "–õ–µ—Ö–∞ –ö—É—Å—Ç", text: "–ü—Ä–∏–≤–µ—Ç —è —Ç–≤–æ–π –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∑—Ä–∏—Ç–µ–ª—å" },
      { author: "–í–∏—Ç—è –¢—Ä–∞–∫—Ç–æ—Ä", text: "–ù—É –∏ –∑–∞—á–µ–º —Ç—ã —ç—Ç–æ –≤—ã–ª–æ–∂–∏–ª?" },
      { author: "–ê–Ω–∞—Ç–æ–ª–∏–π –ñ–º—è–∫–æ–≤", text: "–£–¥–∞–ª—è–π!" },
      { author: "Dima_2015", text: "–õ–∞–π–∫!" },
      { author: "Ndsdd", text: "KEKW" },
      { author: "–ê–Ω–¥—Ä–µ–π –í–∏—Ä–∞–ª–µ—Å", text: "–ö–¢–û" },
      { author: "–ê–Ω–æ–Ω–∏–º", text: "–ê—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö" },
      { author: "–ê–Ω–Ω–∞", text: "42 42 42 42 42" },
      { author: "Okkkew", text: "LOL!!!" },
      { author: "qwertty123", text: "–¢—É—Ç –∫—Ç–æ —Ç–æ –µ—Å—Ç—å ?" },
    ];
    setMessages(demoMessages);
  }, [id]);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleSendMessage = (e) => {
    e.preventDefault();
    if (newMessage.trim() === "") return;

    const message = {
      author: "–í—ã",
      text: newMessage,
    };

    setMessages([...messages, message]);
    setNewMessage("");
    // –°–±—Ä–æ—Å –≤—ã—Å–æ—Ç—ã textarea –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
    }
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    setTimeout(() => {
      const randomResponse = authorResponses[Math.floor(Math.random() * authorResponses.length)];
      setMessages((prev) => [
        ...prev,
        { author: "–°–µ—Ä–≥–µ–π", text: randomResponse },
      ]);
    }, 1000);
  };

  const handleTextareaChange = (e) => {
    setNewMessage(e.target.value);
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      textareaRef.current.style.height = `${Math.min(textareaRef.current.scrollHeight, 150)}px`;
    }
  };


  if (!video) {
    return <div className="loading">Loading...</div>;
  }

  return (
    <div className="video-page-container">
      <div className="video-container">
        <h2 className="video-title">{video.title}</h2>
        <div className="video-wrapper">
          <video controls className="video-player">
            <source src={video.video_file} type="video/mp4" />
            Your browser does not support the video tag.
          </video>
        </div>
        <p className="video-description">{video.description}</p>
      </div>

      <div className="chat-container">
        <div className="chat-header">–ß–∞—Ç</div>
        <div className="chat-messages">
          {messages.map((msg, index) => (
            <ChatMessage key={index} author={msg.author} text={msg.text} />
          ))}
          <div ref={chatEndRef} />
        </div>
        <form onSubmit={handleSendMessage} className="chat-input-form">
          <div className="textarea-container">
            <textarea
              ref={textareaRef}
              value={newMessage}
              onChange={handleTextareaChange}
              placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
              className="chat-textarea"
              rows={1}
            />
            <button 
              type="button" 
              className="emoji-button"
              onClick={() => setShowEmojis(!showEmojis)}
            >
              üôÇ
            </button>
            
            {showEmojis && (
              <div className="emoji-picker">
                {emojis.map((emoji, index) => (
                  <button
                    key={index}
                    type="button"
                    className="emoji-option"
                    onClick={() => {
                      insertEmoji(emoji);
                      setShowEmojis(false);
                    }}
                  >
                    {emoji}
                  </button>
                ))}
              </div>
            )}
          </div>
          
          <button type="submit" className="send-button">
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
          </button>
        </form>
      </div>
    </div>
  );
};

export default VideoPlayer;